<?php

namespace Tests\Feature;

use App\Models\CandidateInformation;
use App\Models\ProcessTicket;
use App\Models\RepresentativeInformation;
use App\Models\TicketSubmission;
use App\Models\User;
use Tests\TestCase;
use JWTAuth;

class TicketTest extends TestCase
{

    protected $adminToken;

    protected $user;
    protected $seed = true;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub


        $this->adminToken = $this->post('/api/v1/admin/login', [
            'email' => 'support@mail.com',
            'password' => 12345678
        ])->json('data.token.access_token');

        $this->user = User::factory()
            ->has(CandidateInformation::factory()->has(TicketSubmission::factory()->count(3), 'ticketSubmission')
                ->count(1), 'getCandidate')
            ->create();

    }

    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function test_status()
    {

        $response =  $this->withToken($this->adminToken)->get('/api/v1/admin/get-users-with-tickets');


        $alltickets = TicketSubmission::with('processTicket')->get();

        $formData = collect([
            'data' => $alltickets,
        ])->toArray();

        $response->assertStatus(200);
        $response->assertJson($formData);
    }

    public function  test_send_resolve_Ticket()
    {
        $user = json_encode(User::factory()->create());
        $formData = [
            'message' => 'hello world',
            'ticket_id' => TicketSubmission::first()->id,
            'user' => $user,
        ];

        $response = $this->withToken($this->adminToken)
            ->post('/api/v1/admin/submitTicketRequests', $formData);

        $ticketProcess = new ProcessTicket([
            'message' => 'hello world',
            'ticket_id' => TicketSubmission::first()->id,
            'status' => 1,
            'user' => $user
        ]);

        $formData = collect([
            'data' => $ticketProcess,
        ])->toArray();

       $response->assertJson($formData);
    }

    public function test_get_list_of_tickets()
    {
      $response =  $this->withToken($this->adminToken)
            ->get('/api/v1/admin/getAllTicketMessages/'.  TicketSubmission::first()->id);

      $ticketProcessMessages = ProcessTicket::where('ticket_id', TicketSubmission::first()->id)->get();


      $formData = collect([
          'data' => $ticketProcessMessages
      ])->toArray();

      $response->assertStatus(200);
      $response->assertJson($formData);
    }

    public function test_user_get_ticket_list()
    {

       $token = JWTAuth::fromUser($this->user);

       $response = $this->actingAs($this->user, 'api')->withToken($token)->get('/api/v1/getAllTickets/'. $this->user->id);

      $allTicket = TicketSubmission::where('user_id', $this->user->id)->with('processTicket')->get();

        $formData = collect([
            'data' => $allTicket
        ])->toArray();

      $response->assertJson($formData);
    }

    public function test_resolve_ticket_for_user()
    {
        $token = JWTAuth::fromUser($this->user);
        $ticket_id = TicketSubmission::first()->id;
       $response = $this->actingAs($this->user, 'api')->withToken($token)->post('/api/v1/resolveTicket', [
            'ticket_id' => $ticket_id
        ]);

       $resolveIssue = TicketSubmission::find($ticket_id);
       $resolveIssue->resolve = 1;

       $formData = collect([
           'data' => $resolveIssue
       ])->toArray();

       $response->assertOk();
       $response->assertJson($formData);
    }

    public function test_resolving_ticket_by_admin()
    {
        $id = TicketSubmission::first()->id;
        $ticket = TicketSubmission::find($id);
       $response = $this->withToken($this->adminToken)->post('/api/v1/admin/ticketResolve', [
            'ticket_id' => $id
        ]);



       $formData = collect([
           'data' => $ticket,
       ])->toArray();

       $response->assertJson($formData);

        $response->assertOk();
    }

    public function test_user_reply_back()
    {
        $token = JWTAuth::fromUser($this->user);

      $response =  $this->actingAs($this->user, 'api')->withToken($token)->post('/api/v1/send-support-message', [
            'message' => 'hello customer',
            'ticket_id' => TicketSubmission::first()->id
      ]);

      $message = new ProcessTicket([
          'message' => 'hello customer',
          'ticket_id' => TicketSubmission::first()->id,
          'status' => 1
      ]);

      $formData = collect([
          'data' => $message
      ])->toArray();
      $response->assertJson($formData);

      $response->assertOk();
    }
}
