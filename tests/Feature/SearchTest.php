<?php

namespace Tests\Feature;


use App\Models\CandidateInformation;
use App\Models\EducationLevel;
use App\Models\ProcessTicket;
use App\Models\Religion;
use App\Models\RepresentativeInformation;
use App\Models\Team;
use App\Models\TeamMember;
use App\Models\TicketSubmission;
use App\Models\User;
use Tests\TestCase;
use JWTAuth;
use Illuminate\Foundation\Testing\RefreshDatabase;
class SearchTest extends TestCase
{
    // use RefreshDatabase;

    protected $user;
    protected $seed = true;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        // $member = TeamMember::factory()->create();

       $this->user = CandidateInformation::factory()->for(Religion::factory(), 'getReligion')
       ->for(EducationLevel::factory(), 'preEducationLevel')
       ->for(EducationLevel::factory(), 'candidateEducationLevel')
       ->for(User::factory()->has(TeamMember::factory()->for(Team::factory()), 'team_member'))->create()->user;
    //  $team = User::factory()->has(Team::factory()->hasAttached(CandidateInformation::factory()->count(1)), 'getCandidate')->create()->first();
    //  $this->user = $team;

    }

    public function test_user_Member()
    {

       $token = JWTAuth::fromUser($this->user);

       $response = $this->actingAs($this->user, 'api')->withToken($token)->get('/api/v1/home-searches');

     $caniddateInTeam = CandidateInformation::where('user_id', $this->user->id)->whereHas('candidateTeam')->get();

        $formData = collect([
            'data' => $caniddateInTeam
        ])->toArray();

      $response->assertJson($formData);
    }

}
